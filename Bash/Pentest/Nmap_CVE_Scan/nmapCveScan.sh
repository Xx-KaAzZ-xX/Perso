#!/bin/bash

#.	Description : Little script that launch a Nmap scan and allow to find CVE from that scan
#.				  This script is based on Cve-Search DB and Cve-Scan tool. 
usage() {
  script_name=$(basename $0)
  echo -e "Available options for this script :
          -h : Print this help message.
          -t : Target IP.

Example : ./$script_name -t 127.0.0.1
"
}

requirements() {
echo "Checking requirements..."
dpkg -s mongodb >/dev/null 2>&1 || apt-get install mongodb -y >/dev/null 2>&1 
dpkg -s python3 >/dev/null 2>&1 || apt-get install python3 -y >/dev/null 2>&1 
dpkg -s proxychains >/dev/null 2>&1 || apt-get install proxychains -y >/dev/null 2>&1
dpkg -s nmap >/dev/null 2>&1 || apt-get install nmap -y >/dev/null 2>&1

mongo=$(ss -paunt | grep mongo)
if [ -z "${mongo}" ]; then
  echo "MongoDB is not running. CVE-Search won't work."
  exit 0
fi
}


if [ -z "${1}" ]; then
  usage
  exit 0
fi

requirements

CVE_SCAN_DIR="/root/Pentest/CVE-Scan/"
CVE_SEARCH_DIR="/root/Pentest/Cve-search/"

read -p "Do you want to update Cve-search Database? [Y/n] " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
    python3 ${CVE_SEARCH_DIR}/sbin/db_updater.py
fi

while getopts "ht:" opt; do
  case $opt in
    h) usage
      ;;
    t) target="$OPTARG"
	   xml_file="${target}.xml"
	   json_file="${target}.json"
	   proxychains nmap -A -T4 -sV ${target} -oX ${xml_file}
	   #nmap -A -T4 -sV ${target} -oX ${xml_file}
	   python3 ${CVE_SCAN_DIR}/bin/analyzer.py -x ${xml_file} ${json_file}
	   rm ${xml_file}
	   python3 ${CVE_SCAN_DIR}/bin/visualizer.py ${json_file}
	   rm ${json_file}
      ;;
  esac
done

exit 0